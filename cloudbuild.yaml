steps:
# Step 1: Pull the latest image to use as a cache source
- name: 'gcr.io/${_PROJECT_ID}/my-docker-repo/gcp-terraform-build:latest'
  id: pull-cache
  entrypoint: bash
  args: [ '-c', 'docker pull ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest || exit 0' ]

# Step 2: Build the image, using the pulled image as a cache
- name: 'gcr.io/${_PROJECT_ID}/my-docker-repo/gcp-terraform-build:latest'
  id: build
  entrypoint: docker
  args:
  - build
  - --cache-from
  - '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest'
  - --tag
  - '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:$BUILD_ID'
  - --tag
  - '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest'
  - '.'
  waitFor: ['pull-cache']

# Step 3: Push the new image to Artifact Registry
- name: 'gcr.io/${_PROJECT_ID}/my-docker-repo/gcp-terraform-build:latest'
  id: push
  entrypoint: docker
  args: ['push', '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest']
  waitFor: ['build']

# Step 4: Download config and deploy
- name: 'gcr.io/${_PROJECT_ID}/my-docker-repo/gcp-terraform-build:latest'
  id: deploy
  entrypoint: sh
  args:
  - '-c'
  - |
    gcloud secrets versions access latest --secret="worker-tfvars" --project="${_PROJECT_ID}" > terraform/terraform.tfvars
    cd terraform
    terraform init -backend-config="prefix=cloud-spanner-demo/${_PROJECT_SUFFIX}/worker"
    terraform apply -auto-approve -var="image_tag=$BUILD_ID"
  waitFor: ['push']

# Step 5: Clean up old images
- name: 'gcr.io/${_PROJECT_ID}/my-docker-repo/gcp-terraform-build:latest'
  id: cleanup-images
  entrypoint: bash
  args:
  - 'cleanup_images.sh'
  - '${_LOCATION}'
  - '${_PROJECT_ID}'
  - '${_REPOSITORY_ID}'
  - '${_IMAGE_NAME}'
  waitFor: ['deploy']

images:
- '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:$BUILD_ID'
- '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest'

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _PROJECT_ID: '${PROJECT_ID}'
  _LOCATION: 'europe-west1'
  _REPOSITORY_ID: 'my-docker-repo'
  _IMAGE_NAME: 'graphrag-fn-worker'
  _PROJECT_SUFFIX: '' # This will be overridden by the trigger
