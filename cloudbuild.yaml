steps:
# Build and tag the Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: build
  args: [
    'build',
    '--build-arg', 'BASE_IMAGE_LOCATION=${_LOCATION}',
    '--build-arg', 'PROJECT_ID=${_PROJECT_ID}',
    '--build-arg', 'REPOSITORY_ID=${_REPOSITORY_ID}',
    '-t', '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:$BUILD_ID',
    '-t', '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest',
    '-f', 'Dockerfile',
    '.'
  ]

# Push the images
- name: 'gcr.io/cloud-builders/docker'
  id: push
  args: ['push', '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}', '--all-tags']
  waitFor: ['build']

# Run Terraform to deploy the function and its resources
- name: 'hashicorp/terraform:1.0.0'
  id: terraform-deploy
  entrypoint: 'sh'
  args:
  - '-c'
  - | 
    cd terraform
    terraform init -backend-config="prefix=cloud-spanner-demo/${_PROJECT_SUFFIX}/worker"
    terraform apply -auto-approve \
      -var="project_id=${_PROJECT_ID}" \
      -var="region=${_REGION}" \
      -var="location=${_LOCATION}" \
      -var="repository_id=${_REPOSITORY_ID}" \
      -var="image_name=${_IMAGE_NAME}" \
      -var="image_tag=$BUILD_ID" \
      -var="redis_host=${_REDIS_HOST}" \
      -var="redis_port=${_REDIS_PORT}" \
      -var="spanner_instance=${_SPANNER_INSTANCE}" \
      -var="spanner_database=${_SPANNER_DATABASE}" \
      -var="worker_sa_email=worker-sa@${_PROJECT_ID}.iam.gserviceaccount.com" \
      -var="redis_password=${_REDIS_PASSWORD}" \
      -var="consolidation_topic=${_CONSOLIDATION_TOPIC}"
  waitFor: ['push']

# Clean up old images
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: cleanup-images
  entrypoint: 'bash'
  args:
  - './cleanup_images.sh'
  - '${_LOCATION}'
  - '${_PROJECT_ID}'
  - '${_REPOSITORY_ID}'
  - '${_IMAGE_NAME}'
  waitFor: ['terraform-deploy']

images:
- '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:$BUILD_ID'
- '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_ID}/${_IMAGE_NAME}:latest'
options:
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _LOCATION: 'europe-west1'
  _PROJECT_ID: '${PROJECT_ID}'
  _REPOSITORY_ID: 'my-docker-repo'
  _IMAGE_NAME: 'worker'
  _REGION: 'europe-west1'
  _REDIS_HOST: '127.0.0.1' # Placeholder, will be overridden by Terraform
  _REDIS_PORT: '6379' # Placeholder, will be overridden by Terraform
  _SPANNER_INSTANCE: 'my-spanner-instance' # Placeholder, will be overridden by Terraform
  _SPANNER_DATABASE: 'my-spanner-database' # Placeholder, will be overridden by Terraform
  _WORKER_SA_EMAIL: 'worker-sa@${PROJECT_ID}.iam.gserviceaccount.com' # Placeholder, will be overridden by Terraform
  _PROJECT_SUFFIX: '' # This will be overridden by the trigger
